import java.util.*;

public class MinimizeMalwareSpread {

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        DisjointSet dsu = new DisjointSet(n);


        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (graph[i][j] == 1) {
                    dsu.unionBySize(i, j);
                }
            }
        }

       int[]infection= new int[n];
        for(int node:initial){
            int parent=dsu.findUltimateParent(node);
            infection[parent]++;
        }

        Arrays.sort(initial);
        int maxSaved=-1;
        int bestNode=initial[0];
        for(int node:initial){
            int parent=dsu.findUltimateParent(node);
            if(infection[parent]==1){
                int size=dsu.size[parent];
                if(size>maxSaved){
                    maxSaved=size;
                    bestNode=node;
                }
            }
        }
        return bestNode;
    }




    public class DisjointSet {

        int[]parent;

        int[]size;

        public DisjointSet(int n) {
            parent= new int[n];
            size= new int[n];
            for(int i=0;i<n;i++) {
                parent[i] = i;
                size[i] = 1;
            }
        }
        public int findUltimateParent(int node){
            if(parent[node]==node){
                return node;
            }
            return parent[node]=findUltimateParent(parent[node]);
        }

        public void unionBySize(int u,int v){
            int pu = findUltimateParent(u);
            int pv = findUltimateParent(v);
            if (pu == pv) return;
            if (size[pu] >= size[pv]) {
                parent[pv] = pu;
                size[pu] += size[pv];
            } else {
                parent[pu] = pv;
                size[pv] += size[pu];
            }

        }
    }

}
